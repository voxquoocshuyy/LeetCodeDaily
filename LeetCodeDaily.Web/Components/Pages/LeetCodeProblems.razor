@page "/leetcode-problems"
@using LeetCodeDaily.Web.Models
@using LeetCodeDaily.Web.Services
@inject LeetCodeService LeetCodeService
@inject IJobService JobService
@inject ILogger<LeetCodeProblems> Logger
@inject NavigationManager NavigationManager

<PageTitle>LeetCode Problems</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>LeetCode Problems</h1>
        <button class="btn btn-primary" @onclick="RunDailyProblemJobAsync" disabled="@_isRunningJob">
            @if (_isRunningJob)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span class="ms-2">Running...</span>
            }
            else
            {
                <span>Fetch Today's Problem</span>
            }
        </button>
    </div>

    @if (_isLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (_error != null)
    {
        <div class="alert alert-danger" role="alert">
            <h4 class="alert-heading">Error!</h4>
            <p>@_error</p>
            <hr>
            <button class="btn btn-primary" @onclick="LoadProblemsAsync">Try Again</button>
        </div>
    }
    else if (_problems == null || !_problems.Any())
    {
        <div class="alert alert-info" role="alert">
            <p>No problems found.</p>
            <hr>
            <p class="mb-0">Click the "Fetch Today's Problem" button to get started.</p>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Difficulty</th>
                        <th>Category</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var problem in _problems)
                    {
                        <tr>
                            <td>@problem.Title</td>
                            <td>
                                <span class="badge bg-@GetDifficultyColor(problem.Difficulty)">
                                    @problem.Difficulty
                                </span>
                            </td>
                            <td>@problem.CategoryTitle</td>
                            <td>
                                <a href="/problems/@problem.TitleSlug" class="btn btn-primary btn-sm">View</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<LeetCodeProblem>? _problems;
    private bool _isLoading = true;
    private bool _isRunningJob = false;
    private string? _error;

    protected override async Task OnInitializedAsync()
    {
        await LoadProblemsAsync();
    }

    private async Task LoadProblemsAsync()
    {
        try
        {
            _isLoading = true;
            _error = null;
            _problems = await LeetCodeService.GetAllProblemsAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading problems");
            _error = "An error occurred while loading problems. Please try again.";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task RunDailyProblemJobAsync()
    {
        try
        {
            _isRunningJob = true;
            _error = null;
            await JobService.RunDailyProblemJobAsync();
            
            // Đợi một chút để đảm bảo job đã hoàn thành
            await Task.Delay(2000);
            
            // Load lại danh sách problems
            await LoadProblemsAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error running daily problem job");
            _error = "An error occurred while fetching today's problem. Please try again.";
        }
        finally
        {
            _isRunningJob = false;
        }
    }

    private string GetDifficultyColor(string difficulty) => difficulty.ToLower() switch
    {
        "easy" => "success",
        "medium" => "warning",
        "hard" => "danger",
        _ => "secondary"
    };
} 
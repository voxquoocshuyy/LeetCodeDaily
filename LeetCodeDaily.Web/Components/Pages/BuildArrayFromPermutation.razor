@page "/problems/build-array-from-permutation"
@using LeetCodeDaily.Web.Models
@using LeetCodeDaily.Web.Services
@inject LeetCodeService LeetCodeService

<PageTitle>Build Array from Permutation</PageTitle>

<div class="container mt-4">
    @if (problem == null)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h3 class="mb-0">@problem.Title</h3>
                <span class="badge @GetDifficultyBadgeClass()">@problem.Difficulty</span>
            </div>
            <div class="card-body">
                <div class="mb-4">
                    <h5>Description</h5>
                    <div class="problem-description">
                        @((MarkupString)problem.Description)
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(problem.Example))
                {
                    <div class="mb-4">
                        <h5>Example</h5>
                        <pre class="bg-light p-3 rounded"><code>@problem.Example</code></pre>
                    </div>
                }

                @if (!string.IsNullOrEmpty(problem.Constraints))
                {
                    <div class="mb-4">
                        <h5>Constraints</h5>
                        <pre class="bg-light p-3 rounded"><code>@problem.Constraints</code></pre>
                    </div>
                }

                <div class="mb-4">
                    <h5>Solution</h5>
                    <pre class="bg-light p-3 rounded"><code>@problem.Solution</code></pre>
                </div>

                <div class="mb-4">
                    <h5>Explanation</h5>
                    <div class="explanation">
                        @((MarkupString)problem.Explanation)
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .problem-description {
        white-space: pre-wrap;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        line-height: 1.6;
    }

    .explanation {
        white-space: pre-wrap;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        line-height: 1.6;
    }

    pre {
        margin: 0;
        white-space: pre-wrap;
    }

    code {
        font-family: 'Consolas', 'Courier New', monospace;
    }
</style>

@code {
    private LeetCodeProblem? problem;

    protected override async Task OnInitializedAsync()
    {
        problem = await LeetCodeService.GetProblemByTitleSlugAsync("build-array-from-permutation");
    }

    private string GetDifficultyBadgeClass()
    {
        return problem?.Difficulty?.ToLower() switch
        {
            "easy" => "bg-success",
            "medium" => "bg-warning",
            "hard" => "bg-danger",
            _ => "bg-secondary"
        };
    }
} 
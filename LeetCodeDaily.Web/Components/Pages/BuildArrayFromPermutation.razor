@page "/build-array-from-permutation"
@using LeetCodeDaily.Core.Solutions._1920_BuildArrayFromPermutation

<PageTitle>Build Array from Permutation</PageTitle>

<div class="container mt-4">
    <h1>Build Array from Permutation</h1>
    
    <div class="card mb-4">
        <div class="card-body">
            <h5 class="card-title">Problem Description</h5>
            <p class="card-text">
                Given a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]] for each 0 &lt;= i &lt; nums.length and return it.
            </p>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Input Array</h5>
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" @bind="inputArray" placeholder="Enter numbers separated by commas (e.g., 0,2,1,5,3,4)" />
                        <button class="btn btn-primary" @onclick="ProcessArray">Process</button>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Result</h5>
                    @if (inputNumbers != null && result != null && inputNumbers.Length > 0 && result.Length > 0)
                    {
                        <div class="result-container">
                            <div class="input-array mb-3">
                                <h6>Input: [@string.Join(", ", inputNumbers)]</h6>
                            </div>
                            <div class="output-array">
                                <h6>Output: [@string.Join(", ", result)]</h6>
                            </div>
                            <div class="visualization mt-4">
                                <h6>Visualization:</h6>
                                <div class="array-visualization">
                                    @for (int i = 0; i < inputNumbers.Length; i++)
                                    {
                                        <div class="array-element">
                                            <div class="element-value">@inputNumbers[i]</div>
                                            <div class="element-index">@i</div>
                                        </div>
                                    }
                                </div>
                                <div class="arrow-down mt-2 mb-2">â†“</div>
                                <div class="array-visualization">
                                    @for (int i = 0; i < result.Length; i++)
                                    {
                                        <div class="array-element">
                                            <div class="element-value">@result[i]</div>
                                            <div class="element-index">@i</div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .array-visualization {
        display: flex;
        gap: 10px;
        justify-content: center;
        margin: 10px 0;
    }

    .array-element {
        border: 2px solid #007bff;
        border-radius: 5px;
        padding: 10px;
        min-width: 50px;
        text-align: center;
        background-color: #f8f9fa;
    }

    .element-value {
        font-weight: bold;
        font-size: 1.2em;
    }

    .element-index {
        font-size: 0.8em;
        color: #6c757d;
    }

    .arrow-down {
        text-align: center;
        font-size: 1.5em;
        color: #28a745;
    }

    .result-container {
        padding: 15px;
        background-color: #f8f9fa;
        border-radius: 5px;
    }
</style>

@code {
    private string inputArray = "";
    private int[] inputNumbers = Array.Empty<int>();
    private int[] result = Array.Empty<int>();
    private Solution solution = new Solution();

    private void ProcessArray()
    {
        try
        {
            inputNumbers = inputArray.Split(',')
                                   .Select(x => int.Parse(x.Trim()))
                                   .ToArray();
            result = solution.BuildArray(inputNumbers);
        }
        catch (Exception ex)
        {
            // In a real application, you might want to show this error to the user
            Console.WriteLine($"Error processing array: {ex.Message}");
            inputNumbers = Array.Empty<int>();
            result = Array.Empty<int>();
        }
    }
} 
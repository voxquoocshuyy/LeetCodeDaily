{
  "title": "Longest Unequal Adjacent Groups Subsequence II",
  "titleSlug": "longest-unequal-adjacent-groups-subsequence-ii",
  "questionFrontendId": "2901",
  "translatedTitle": "",
  "difficulty": "Medium",
  "content": "\u003Cp\u003EYou are given a string array \u003Ccode\u003Ewords\u003C/code\u003E, and an array \u003Ccode\u003Egroups\u003C/code\u003E, both arrays having length \u003Ccode\u003En\u003C/code\u003E.\u003C/p\u003E\n\n\u003Cp\u003EThe \u003Cstrong\u003Ehamming distance\u003C/strong\u003E between two strings of equal length is the number of positions at which the corresponding characters are \u003Cstrong\u003Edifferent\u003C/strong\u003E.\u003C/p\u003E\n\n\u003Cp\u003EYou need to select the \u003Cstrong\u003Elongest\u003C/strong\u003E \u003Cspan data-keyword=\u0022subsequence-array\u0022\u003Esubsequence\u003C/span\u003E from an array of indices \u003Ccode\u003E[0, 1, ..., n - 1]\u003C/code\u003E, such that for the subsequence denoted as \u003Ccode\u003E[i\u003Csub\u003E0\u003C/sub\u003E, i\u003Csub\u003E1\u003C/sub\u003E, ..., i\u003Csub\u003Ek-1\u003C/sub\u003E]\u003C/code\u003E having length \u003Ccode\u003Ek\u003C/code\u003E, the following holds:\u003C/p\u003E\n\n\u003Cul\u003E\n\t\u003Cli\u003EFor \u003Cstrong\u003Eadjacent\u003C/strong\u003E indices in the subsequence, their corresponding groups are \u003Cstrong\u003Eunequal\u003C/strong\u003E, i.e., \u003Ccode\u003Egroups[i\u003Csub\u003Ej\u003C/sub\u003E] != groups[i\u003Csub\u003Ej\u002B1\u003C/sub\u003E]\u003C/code\u003E, for each \u003Ccode\u003Ej\u003C/code\u003E where \u003Ccode\u003E0 \u0026lt; j \u002B 1 \u0026lt; k\u003C/code\u003E.\u003C/li\u003E\n\t\u003Cli\u003E\u003Ccode\u003Ewords[i\u003Csub\u003Ej\u003C/sub\u003E]\u003C/code\u003E and \u003Ccode\u003Ewords[i\u003Csub\u003Ej\u002B1\u003C/sub\u003E]\u003C/code\u003E are \u003Cstrong\u003Eequal\u003C/strong\u003E in length, and the \u003Cstrong\u003Ehamming distance\u003C/strong\u003E between them is \u003Ccode\u003E1\u003C/code\u003E, where \u003Ccode\u003E0 \u0026lt; j \u002B 1 \u0026lt; k\u003C/code\u003E, for all indices in the subsequence.\u003C/li\u003E\n\u003C/ul\u003E\n\n\u003Cp\u003EReturn \u003Cem\u003Ea string array containing the words corresponding to the indices \u003Cstrong\u003E(in order)\u003C/strong\u003E in the selected subsequence\u003C/em\u003E. If there are multiple answers, return \u003Cem\u003Eany of them\u003C/em\u003E.\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003ENote:\u003C/strong\u003E strings in \u003Ccode\u003Ewords\u003C/code\u003E may be \u003Cstrong\u003Eunequal\u003C/strong\u003E in length.\u003C/p\u003E\n\n\u003Cp\u003E\u0026nbsp;\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong class=\u0022example\u0022\u003EExample 1:\u003C/strong\u003E\u003C/p\u003E\n\n\u003Cdiv class=\u0022example-block\u0022 style=\u0022border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\u0022\u003E\n\u003Cp\u003E\u003Cstrong\u003EInput: \u003C/strong\u003E\u003Cspan class=\u0022example-io\u0022 style=\u0022font-family: Menlo,sans-serif; font-size: 0.85rem;\u0022\u003Ewords = [\u0026quot;bab\u0026quot;,\u0026quot;dab\u0026quot;,\u0026quot;cab\u0026quot;], groups = [1,2,2]\u003C/span\u003E\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EOutput: \u003C/strong\u003E\u003Cspan class=\u0022example-io\u0022 style=\u0022font-family: Menlo,sans-serif; font-size: 0.85rem;\u0022\u003E[\u0026quot;bab\u0026quot;,\u0026quot;cab\u0026quot;]\u003C/span\u003E\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EExplanation: \u003C/strong\u003EA subsequence that can be selected is \u003Ccode\u003E[0,2]\u003C/code\u003E.\u003C/p\u003E\n\n\u003Cul\u003E\n\t\u003Cli\u003E\u003Ccode\u003Egroups[0] != groups[2]\u003C/code\u003E\u003C/li\u003E\n\t\u003Cli\u003E\u003Ccode\u003Ewords[0].length == words[2].length\u003C/code\u003E, and the hamming distance between them is 1.\u003C/li\u003E\n\u003C/ul\u003E\n\n\u003Cp\u003ESo, a valid answer is \u003Ccode\u003E[words[0],words[2]] = [\u0026quot;bab\u0026quot;,\u0026quot;cab\u0026quot;]\u003C/code\u003E.\u003C/p\u003E\n\n\u003Cp\u003EAnother subsequence that can be selected is \u003Ccode\u003E[0,1]\u003C/code\u003E.\u003C/p\u003E\n\n\u003Cul\u003E\n\t\u003Cli\u003E\u003Ccode\u003Egroups[0] != groups[1]\u003C/code\u003E\u003C/li\u003E\n\t\u003Cli\u003E\u003Ccode\u003Ewords[0].length == words[1].length\u003C/code\u003E, and the hamming distance between them is \u003Ccode\u003E1\u003C/code\u003E.\u003C/li\u003E\n\u003C/ul\u003E\n\n\u003Cp\u003ESo, another valid answer is \u003Ccode\u003E[words[0],words[1]] = [\u0026quot;bab\u0026quot;,\u0026quot;dab\u0026quot;]\u003C/code\u003E.\u003C/p\u003E\n\n\u003Cp\u003EIt can be shown that the length of the longest subsequence of indices that satisfies the conditions is \u003Ccode\u003E2\u003C/code\u003E.\u003C/p\u003E\n\u003C/div\u003E\n\n\u003Cp\u003E\u003Cstrong class=\u0022example\u0022\u003EExample 2:\u003C/strong\u003E\u003C/p\u003E\n\n\u003Cdiv class=\u0022example-block\u0022 style=\u0022border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\u0022\u003E\n\u003Cp\u003E\u003Cstrong\u003EInput: \u003C/strong\u003E\u003Cspan class=\u0022example-io\u0022 style=\u0022font-family: Menlo,sans-serif; font-size: 0.85rem;\u0022\u003Ewords = [\u0026quot;a\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;c\u0026quot;,\u0026quot;d\u0026quot;], groups = [1,2,3,4]\u003C/span\u003E\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EOutput: \u003C/strong\u003E\u003Cspan class=\u0022example-io\u0022 style=\u0022font-family: Menlo,sans-serif; font-size: 0.85rem;\u0022\u003E[\u0026quot;a\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;c\u0026quot;,\u0026quot;d\u0026quot;]\u003C/span\u003E\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EExplanation: \u003C/strong\u003EWe can select the subsequence \u003Ccode\u003E[0,1,2,3]\u003C/code\u003E.\u003C/p\u003E\n\n\u003Cp\u003EIt satisfies both conditions.\u003C/p\u003E\n\n\u003Cp\u003EHence, the answer is \u003Ccode\u003E[words[0],words[1],words[2],words[3]] = [\u0026quot;a\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;c\u0026quot;,\u0026quot;d\u0026quot;]\u003C/code\u003E.\u003C/p\u003E\n\n\u003Cp\u003EIt has the longest length among all subsequences of indices that satisfy the conditions.\u003C/p\u003E\n\n\u003Cp\u003EHence, it is the only answer.\u003C/p\u003E\n\u003C/div\u003E\n\n\u003Cp\u003E\u0026nbsp;\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003EConstraints:\u003C/strong\u003E\u003C/p\u003E\n\n\u003Cul\u003E\n\t\u003Cli\u003E\u003Ccode\u003E1 \u0026lt;= n == words.length == groups.length \u0026lt;= 1000\u003C/code\u003E\u003C/li\u003E\n\t\u003Cli\u003E\u003Ccode\u003E1 \u0026lt;= words[i].length \u0026lt;= 10\u003C/code\u003E\u003C/li\u003E\n\t\u003Cli\u003E\u003Ccode\u003E1 \u0026lt;= groups[i] \u0026lt;= n\u003C/code\u003E\u003C/li\u003E\n\t\u003Cli\u003E\u003Ccode\u003Ewords\u003C/code\u003E consists of \u003Cstrong\u003Edistinct\u003C/strong\u003E strings.\u003C/li\u003E\n\t\u003Cli\u003E\u003Ccode\u003Ewords[i]\u003C/code\u003E consists of lowercase English letters.\u003C/li\u003E\n\u003C/ul\u003E\n",
  "description": "\u003Cp\u003EYou are given a string array \u003Ccode\u003Ewords\u003C/code\u003E, and an array \u003Ccode\u003Egroups\u003C/code\u003E, both arrays having length \u003Ccode\u003En\u003C/code\u003E.\u003C/p\u003E\n\n\u003Cp\u003EThe \u003Cstrong\u003Ehamming distance\u003C/strong\u003E between two strings of equal length is the number of positions at which the corresponding characters are \u003Cstrong\u003Edifferent\u003C/strong\u003E.\u003C/p\u003E\n\n\u003Cp\u003EYou need to select the \u003Cstrong\u003Elongest\u003C/strong\u003E \u003Cspan data-keyword=\u0022subsequence-array\u0022\u003Esubsequence\u003C/span\u003E from an array of indices \u003Ccode\u003E[0, 1, ..., n - 1]\u003C/code\u003E, such that for the subsequence denoted as \u003Ccode\u003E[i\u003Csub\u003E0\u003C/sub\u003E, i\u003Csub\u003E1\u003C/sub\u003E, ..., i\u003Csub\u003Ek-1\u003C/sub\u003E]\u003C/code\u003E having length \u003Ccode\u003Ek\u003C/code\u003E, the following holds:\u003C/p\u003E\n\n\u003Cul\u003E\n\t\u003Cli\u003EFor \u003Cstrong\u003Eadjacent\u003C/strong\u003E indices in the subsequence, their corresponding groups are \u003Cstrong\u003Eunequal\u003C/strong\u003E, i.e., \u003Ccode\u003Egroups[i\u003Csub\u003Ej\u003C/sub\u003E] != groups[i\u003Csub\u003Ej\u002B1\u003C/sub\u003E]\u003C/code\u003E, for each \u003Ccode\u003Ej\u003C/code\u003E where \u003Ccode\u003E0 \u0026lt; j \u002B 1 \u0026lt; k\u003C/code\u003E.\u003C/li\u003E\n\t\u003Cli\u003E\u003Ccode\u003Ewords[i\u003Csub\u003Ej\u003C/sub\u003E]\u003C/code\u003E and \u003Ccode\u003Ewords[i\u003Csub\u003Ej\u002B1\u003C/sub\u003E]\u003C/code\u003E are \u003Cstrong\u003Eequal\u003C/strong\u003E in length, and the \u003Cstrong\u003Ehamming distance\u003C/strong\u003E between them is \u003Ccode\u003E1\u003C/code\u003E, where \u003Ccode\u003E0 \u0026lt; j \u002B 1 \u0026lt; k\u003C/code\u003E, for all indices in the subsequence.\u003C/li\u003E\n\u003C/ul\u003E\n\n\u003Cp\u003EReturn \u003Cem\u003Ea string array containing the words corresponding to the indices \u003Cstrong\u003E(in order)\u003C/strong\u003E in the selected subsequence\u003C/em\u003E. If there are multiple answers, return \u003Cem\u003Eany of them\u003C/em\u003E.\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003ENote:\u003C/strong\u003E strings in \u003Ccode\u003Ewords\u003C/code\u003E may be \u003Cstrong\u003Eunequal\u003C/strong\u003E in length.\u003C/p\u003E\n\n\u003Cp\u003E\u0026nbsp;\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong class=\u0022example\u0022\u003EExample 1:\u003C/strong\u003E\u003C/p\u003E\n\n\u003Cdiv class=\u0022example-block\u0022 style=\u0022border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\u0022\u003E\n\u003Cp\u003E\u003Cstrong\u003EInput: \u003C/strong\u003E\u003Cspan class=\u0022example-io\u0022 style=\u0022font-family: Menlo,sans-serif; font-size: 0.85rem;\u0022\u003Ewords = [\u0026quot;bab\u0026quot;,\u0026quot;dab\u0026quot;,\u0026quot;cab\u0026quot;], groups = [1,2,2]\u003C/span\u003E\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EOutput: \u003C/strong\u003E\u003Cspan class=\u0022example-io\u0022 style=\u0022font-family: Menlo,sans-serif; font-size: 0.85rem;\u0022\u003E[\u0026quot;bab\u0026quot;,\u0026quot;cab\u0026quot;]\u003C/span\u003E\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EExplanation: \u003C/strong\u003EA subsequence that can be selected is \u003Ccode\u003E[0,2]\u003C/code\u003E.\u003C/p\u003E\n\n\u003Cul\u003E\n\t\u003Cli\u003E\u003Ccode\u003Egroups[0] != groups[2]\u003C/code\u003E\u003C/li\u003E\n\t\u003Cli\u003E\u003Ccode\u003Ewords[0].length == words[2].length\u003C/code\u003E, and the hamming distance between them is 1.\u003C/li\u003E\n\u003C/ul\u003E\n\n\u003Cp\u003ESo, a valid answer is \u003Ccode\u003E[words[0],words[2]] = [\u0026quot;bab\u0026quot;,\u0026quot;cab\u0026quot;]\u003C/code\u003E.\u003C/p\u003E\n\n\u003Cp\u003EAnother subsequence that can be selected is \u003Ccode\u003E[0,1]\u003C/code\u003E.\u003C/p\u003E\n\n\u003Cul\u003E\n\t\u003Cli\u003E\u003Ccode\u003Egroups[0] != groups[1]\u003C/code\u003E\u003C/li\u003E\n\t\u003Cli\u003E\u003Ccode\u003Ewords[0].length == words[1].length\u003C/code\u003E, and the hamming distance between them is \u003Ccode\u003E1\u003C/code\u003E.\u003C/li\u003E\n\u003C/ul\u003E\n\n\u003Cp\u003ESo, another valid answer is \u003Ccode\u003E[words[0],words[1]] = [\u0026quot;bab\u0026quot;,\u0026quot;dab\u0026quot;]\u003C/code\u003E.\u003C/p\u003E\n\n\u003Cp\u003EIt can be shown that the length of the longest subsequence of indices that satisfies the conditions is \u003Ccode\u003E2\u003C/code\u003E.\u003C/p\u003E\n\u003C/div\u003E\n\n\u003Cp\u003E\u003Cstrong class=\u0022example\u0022\u003EExample 2:\u003C/strong\u003E\u003C/p\u003E\n\n\u003Cdiv class=\u0022example-block\u0022 style=\u0022border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\u0022\u003E\n\u003Cp\u003E\u003Cstrong\u003EInput: \u003C/strong\u003E\u003Cspan class=\u0022example-io\u0022 style=\u0022font-family: Menlo,sans-serif; font-size: 0.85rem;\u0022\u003Ewords = [\u0026quot;a\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;c\u0026quot;,\u0026quot;d\u0026quot;], groups = [1,2,3,4]\u003C/span\u003E\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EOutput: \u003C/strong\u003E\u003Cspan class=\u0022example-io\u0022 style=\u0022font-family: Menlo,sans-serif; font-size: 0.85rem;\u0022\u003E[\u0026quot;a\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;c\u0026quot;,\u0026quot;d\u0026quot;]\u003C/span\u003E\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EExplanation: \u003C/strong\u003EWe can select the subsequence \u003Ccode\u003E[0,1,2,3]\u003C/code\u003E.\u003C/p\u003E\n\n\u003Cp\u003EIt satisfies both conditions.\u003C/p\u003E\n\n\u003Cp\u003EHence, the answer is \u003Ccode\u003E[words[0],words[1],words[2],words[3]] = [\u0026quot;a\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;c\u0026quot;,\u0026quot;d\u0026quot;]\u003C/code\u003E.\u003C/p\u003E\n\n\u003Cp\u003EIt has the longest length among all subsequences of indices that satisfy the conditions.\u003C/p\u003E\n\n\u003Cp\u003EHence, it is the only answer.\u003C/p\u003E\n\u003C/div\u003E\n\n\u003Cp\u003E\u0026nbsp;\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003EConstraints:\u003C/strong\u003E\u003C/p\u003E\n\n\u003Cul\u003E\n\t\u003Cli\u003E\u003Ccode\u003E1 \u0026lt;= n == words.length == groups.length \u0026lt;= 1000\u003C/code\u003E\u003C/li\u003E\n\t\u003Cli\u003E\u003Ccode\u003E1 \u0026lt;= words[i].length \u0026lt;= 10\u003C/code\u003E\u003C/li\u003E\n\t\u003Cli\u003E\u003Ccode\u003E1 \u0026lt;= groups[i] \u0026lt;= n\u003C/code\u003E\u003C/li\u003E\n\t\u003Cli\u003E\u003Ccode\u003Ewords\u003C/code\u003E consists of \u003Cstrong\u003Edistinct\u003C/strong\u003E strings.\u003C/li\u003E\n\t\u003Cli\u003E\u003Ccode\u003Ewords[i]\u003C/code\u003E consists of lowercase English letters.\u003C/li\u003E\n\u003C/ul\u003E\n",
  "example": "[\u0022bab\u0022,\u0022dab\u0022,\u0022cab\u0022]\n[1,2,2]\n[\u0022a\u0022,\u0022b\u0022,\u0022c\u0022,\u0022d\u0022]\n[1,2,3,4]",
  "constraints": "",
  "solution": "",
  "explanation": "",
  "exampleTestcases": "[\u0022bab\u0022,\u0022dab\u0022,\u0022cab\u0022]\n[1,2,2]\n[\u0022a\u0022,\u0022b\u0022,\u0022c\u0022,\u0022d\u0022]\n[1,2,3,4]",
  "categoryTitle": "Algorithms",
  "topicTags": [
    {
      "name": "Array",
      "id": "",
      "slug": "array"
    },
    {
      "name": "String",
      "id": "",
      "slug": "string"
    },
    {
      "name": "Dynamic Programming",
      "id": "",
      "slug": "dynamic-programming"
    }
  ],
  "acRate": 0,
  "frequency": 0,
  "status": ""
}
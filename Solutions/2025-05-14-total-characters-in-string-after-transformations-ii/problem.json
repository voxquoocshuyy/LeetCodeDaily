{
  "title": "Total Characters in String After Transformations II",
  "titleSlug": "total-characters-in-string-after-transformations-ii",
  "questionFrontendId": "3337",
  "translatedTitle": "",
  "difficulty": "Hard",
  "content": "\u003Cp\u003EYou are given a string \u003Ccode\u003Es\u003C/code\u003E consisting of lowercase English letters, an integer \u003Ccode\u003Et\u003C/code\u003E representing the number of \u003Cstrong\u003Etransformations\u003C/strong\u003E to perform, and an array \u003Ccode\u003Enums\u003C/code\u003E of size 26. In one \u003Cstrong\u003Etransformation\u003C/strong\u003E, every character in \u003Ccode\u003Es\u003C/code\u003E is replaced according to the following rules:\u003C/p\u003E\n\n\u003Cul\u003E\n\t\u003Cli\u003EReplace \u003Ccode\u003Es[i]\u003C/code\u003E with the \u003Cstrong\u003Enext\u003C/strong\u003E \u003Ccode\u003Enums[s[i] - \u0026#39;a\u0026#39;]\u003C/code\u003E consecutive characters in the alphabet. For example, if \u003Ccode\u003Es[i] = \u0026#39;a\u0026#39;\u003C/code\u003E and \u003Ccode\u003Enums[0] = 3\u003C/code\u003E, the character \u003Ccode\u003E\u0026#39;a\u0026#39;\u003C/code\u003E transforms into the next 3 consecutive characters ahead of it, which results in \u003Ccode\u003E\u0026quot;bcd\u0026quot;\u003C/code\u003E.\u003C/li\u003E\n\t\u003Cli\u003EThe transformation \u003Cstrong\u003Ewraps\u003C/strong\u003E around the alphabet if it exceeds \u003Ccode\u003E\u0026#39;z\u0026#39;\u003C/code\u003E. For example, if \u003Ccode\u003Es[i] = \u0026#39;y\u0026#39;\u003C/code\u003E and \u003Ccode\u003Enums[24] = 3\u003C/code\u003E, the character \u003Ccode\u003E\u0026#39;y\u0026#39;\u003C/code\u003E transforms into the next 3 consecutive characters ahead of it, which results in \u003Ccode\u003E\u0026quot;zab\u0026quot;\u003C/code\u003E.\u003C/li\u003E\n\u003C/ul\u003E\n\n\u003Cp\u003EReturn the length of the resulting string after \u003Cstrong\u003Eexactly\u003C/strong\u003E \u003Ccode\u003Et\u003C/code\u003E transformations.\u003C/p\u003E\n\n\u003Cp\u003ESince the answer may be very large, return it \u003Cstrong\u003Emodulo\u003C/strong\u003E \u003Ccode\u003E10\u003Csup\u003E9\u003C/sup\u003E \u002B 7\u003C/code\u003E.\u003C/p\u003E\n\n\u003Cp\u003E\u0026nbsp;\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong class=\u0022example\u0022\u003EExample 1:\u003C/strong\u003E\u003C/p\u003E\n\n\u003Cdiv class=\u0022example-block\u0022\u003E\n\u003Cp\u003E\u003Cstrong\u003EInput:\u003C/strong\u003E \u003Cspan class=\u0022example-io\u0022\u003Es = \u0026quot;abcyy\u0026quot;, t = 2, nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2]\u003C/span\u003E\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EOutput:\u003C/strong\u003E \u003Cspan class=\u0022example-io\u0022\u003E7\u003C/span\u003E\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EExplanation:\u003C/strong\u003E\u003C/p\u003E\n\n\u003Cul\u003E\n\t\u003Cli\u003E\n\t\u003Cp\u003E\u003Cstrong\u003EFirst Transformation (t = 1):\u003C/strong\u003E\u003C/p\u003E\n\n\t\u003Cul\u003E\n\t\t\u003Cli\u003E\u003Ccode\u003E\u0026#39;a\u0026#39;\u003C/code\u003E becomes \u003Ccode\u003E\u0026#39;b\u0026#39;\u003C/code\u003E as \u003Ccode\u003Enums[0] == 1\u003C/code\u003E\u003C/li\u003E\n\t\t\u003Cli\u003E\u003Ccode\u003E\u0026#39;b\u0026#39;\u003C/code\u003E becomes \u003Ccode\u003E\u0026#39;c\u0026#39;\u003C/code\u003E as \u003Ccode\u003Enums[1] == 1\u003C/code\u003E\u003C/li\u003E\n\t\t\u003Cli\u003E\u003Ccode\u003E\u0026#39;c\u0026#39;\u003C/code\u003E becomes \u003Ccode\u003E\u0026#39;d\u0026#39;\u003C/code\u003E as \u003Ccode\u003Enums[2] == 1\u003C/code\u003E\u003C/li\u003E\n\t\t\u003Cli\u003E\u003Ccode\u003E\u0026#39;y\u0026#39;\u003C/code\u003E becomes \u003Ccode\u003E\u0026#39;z\u0026#39;\u003C/code\u003E as \u003Ccode\u003Enums[24] == 1\u003C/code\u003E\u003C/li\u003E\n\t\t\u003Cli\u003E\u003Ccode\u003E\u0026#39;y\u0026#39;\u003C/code\u003E becomes \u003Ccode\u003E\u0026#39;z\u0026#39;\u003C/code\u003E as \u003Ccode\u003Enums[24] == 1\u003C/code\u003E\u003C/li\u003E\n\t\t\u003Cli\u003EString after the first transformation: \u003Ccode\u003E\u0026quot;bcdzz\u0026quot;\u003C/code\u003E\u003C/li\u003E\n\t\u003C/ul\u003E\n\t\u003C/li\u003E\n\t\u003Cli\u003E\n\t\u003Cp\u003E\u003Cstrong\u003ESecond Transformation (t = 2):\u003C/strong\u003E\u003C/p\u003E\n\n\t\u003Cul\u003E\n\t\t\u003Cli\u003E\u003Ccode\u003E\u0026#39;b\u0026#39;\u003C/code\u003E becomes \u003Ccode\u003E\u0026#39;c\u0026#39;\u003C/code\u003E as \u003Ccode\u003Enums[1] == 1\u003C/code\u003E\u003C/li\u003E\n\t\t\u003Cli\u003E\u003Ccode\u003E\u0026#39;c\u0026#39;\u003C/code\u003E becomes \u003Ccode\u003E\u0026#39;d\u0026#39;\u003C/code\u003E as \u003Ccode\u003Enums[2] == 1\u003C/code\u003E\u003C/li\u003E\n\t\t\u003Cli\u003E\u003Ccode\u003E\u0026#39;d\u0026#39;\u003C/code\u003E becomes \u003Ccode\u003E\u0026#39;e\u0026#39;\u003C/code\u003E as \u003Ccode\u003Enums[3] == 1\u003C/code\u003E\u003C/li\u003E\n\t\t\u003Cli\u003E\u003Ccode\u003E\u0026#39;z\u0026#39;\u003C/code\u003E becomes \u003Ccode\u003E\u0026#39;ab\u0026#39;\u003C/code\u003E as \u003Ccode\u003Enums[25] == 2\u003C/code\u003E\u003C/li\u003E\n\t\t\u003Cli\u003E\u003Ccode\u003E\u0026#39;z\u0026#39;\u003C/code\u003E becomes \u003Ccode\u003E\u0026#39;ab\u0026#39;\u003C/code\u003E as \u003Ccode\u003Enums[25] == 2\u003C/code\u003E\u003C/li\u003E\n\t\t\u003Cli\u003EString after the second transformation: \u003Ccode\u003E\u0026quot;cdeabab\u0026quot;\u003C/code\u003E\u003C/li\u003E\n\t\u003C/ul\u003E\n\t\u003C/li\u003E\n\t\u003Cli\u003E\n\t\u003Cp\u003E\u003Cstrong\u003EFinal Length of the string:\u003C/strong\u003E The string is \u003Ccode\u003E\u0026quot;cdeabab\u0026quot;\u003C/code\u003E, which has 7 characters.\u003C/p\u003E\n\t\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/div\u003E\n\n\u003Cp\u003E\u003Cstrong class=\u0022example\u0022\u003EExample 2:\u003C/strong\u003E\u003C/p\u003E\n\n\u003Cdiv class=\u0022example-block\u0022\u003E\n\u003Cp\u003E\u003Cstrong\u003EInput:\u003C/strong\u003E \u003Cspan class=\u0022example-io\u0022\u003Es = \u0026quot;azbk\u0026quot;, t = 1, nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]\u003C/span\u003E\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EOutput:\u003C/strong\u003E \u003Cspan class=\u0022example-io\u0022\u003E8\u003C/span\u003E\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EExplanation:\u003C/strong\u003E\u003C/p\u003E\n\n\u003Cul\u003E\n\t\u003Cli\u003E\n\t\u003Cp\u003E\u003Cstrong\u003EFirst Transformation (t = 1):\u003C/strong\u003E\u003C/p\u003E\n\n\t\u003Cul\u003E\n\t\t\u003Cli\u003E\u003Ccode\u003E\u0026#39;a\u0026#39;\u003C/code\u003E becomes \u003Ccode\u003E\u0026#39;bc\u0026#39;\u003C/code\u003E as \u003Ccode\u003Enums[0] == 2\u003C/code\u003E\u003C/li\u003E\n\t\t\u003Cli\u003E\u003Ccode\u003E\u0026#39;z\u0026#39;\u003C/code\u003E becomes \u003Ccode\u003E\u0026#39;ab\u0026#39;\u003C/code\u003E as \u003Ccode\u003Enums[25] == 2\u003C/code\u003E\u003C/li\u003E\n\t\t\u003Cli\u003E\u003Ccode\u003E\u0026#39;b\u0026#39;\u003C/code\u003E becomes \u003Ccode\u003E\u0026#39;cd\u0026#39;\u003C/code\u003E as \u003Ccode\u003Enums[1] == 2\u003C/code\u003E\u003C/li\u003E\n\t\t\u003Cli\u003E\u003Ccode\u003E\u0026#39;k\u0026#39;\u003C/code\u003E becomes \u003Ccode\u003E\u0026#39;lm\u0026#39;\u003C/code\u003E as \u003Ccode\u003Enums[10] == 2\u003C/code\u003E\u003C/li\u003E\n\t\t\u003Cli\u003EString after the first transformation: \u003Ccode\u003E\u0026quot;bcabcdlm\u0026quot;\u003C/code\u003E\u003C/li\u003E\n\t\u003C/ul\u003E\n\t\u003C/li\u003E\n\t\u003Cli\u003E\n\t\u003Cp\u003E\u003Cstrong\u003EFinal Length of the string:\u003C/strong\u003E The string is \u003Ccode\u003E\u0026quot;bcabcdlm\u0026quot;\u003C/code\u003E, which has 8 characters.\u003C/p\u003E\n\t\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/div\u003E\n\n\u003Cp\u003E\u0026nbsp;\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003EConstraints:\u003C/strong\u003E\u003C/p\u003E\n\n\u003Cul\u003E\n\t\u003Cli\u003E\u003Ccode\u003E1 \u0026lt;= s.length \u0026lt;= 10\u003Csup\u003E5\u003C/sup\u003E\u003C/code\u003E\u003C/li\u003E\n\t\u003Cli\u003E\u003Ccode\u003Es\u003C/code\u003E consists only of lowercase English letters.\u003C/li\u003E\n\t\u003Cli\u003E\u003Ccode\u003E1 \u0026lt;= t \u0026lt;= 10\u003Csup\u003E9\u003C/sup\u003E\u003C/code\u003E\u003C/li\u003E\n\t\u003Cli\u003E\u003Ccode\u003E\u003Cfont face=\u0022monospace\u0022\u003Enums.length == 26\u003C/font\u003E\u003C/code\u003E\u003C/li\u003E\n\t\u003Cli\u003E\u003Ccode\u003E\u003Cfont face=\u0022monospace\u0022\u003E1 \u0026lt;= nums[i] \u0026lt;= 25\u003C/font\u003E\u003C/code\u003E\u003C/li\u003E\n\u003C/ul\u003E\n",
  "description": "\u003Cp\u003EYou are given a string \u003Ccode\u003Es\u003C/code\u003E consisting of lowercase English letters, an integer \u003Ccode\u003Et\u003C/code\u003E representing the number of \u003Cstrong\u003Etransformations\u003C/strong\u003E to perform, and an array \u003Ccode\u003Enums\u003C/code\u003E of size 26. In one \u003Cstrong\u003Etransformation\u003C/strong\u003E, every character in \u003Ccode\u003Es\u003C/code\u003E is replaced according to the following rules:\u003C/p\u003E\n\n\u003Cul\u003E\n\t\u003Cli\u003EReplace \u003Ccode\u003Es[i]\u003C/code\u003E with the \u003Cstrong\u003Enext\u003C/strong\u003E \u003Ccode\u003Enums[s[i] - \u0026#39;a\u0026#39;]\u003C/code\u003E consecutive characters in the alphabet. For example, if \u003Ccode\u003Es[i] = \u0026#39;a\u0026#39;\u003C/code\u003E and \u003Ccode\u003Enums[0] = 3\u003C/code\u003E, the character \u003Ccode\u003E\u0026#39;a\u0026#39;\u003C/code\u003E transforms into the next 3 consecutive characters ahead of it, which results in \u003Ccode\u003E\u0026quot;bcd\u0026quot;\u003C/code\u003E.\u003C/li\u003E\n\t\u003Cli\u003EThe transformation \u003Cstrong\u003Ewraps\u003C/strong\u003E around the alphabet if it exceeds \u003Ccode\u003E\u0026#39;z\u0026#39;\u003C/code\u003E. For example, if \u003Ccode\u003Es[i] = \u0026#39;y\u0026#39;\u003C/code\u003E and \u003Ccode\u003Enums[24] = 3\u003C/code\u003E, the character \u003Ccode\u003E\u0026#39;y\u0026#39;\u003C/code\u003E transforms into the next 3 consecutive characters ahead of it, which results in \u003Ccode\u003E\u0026quot;zab\u0026quot;\u003C/code\u003E.\u003C/li\u003E\n\u003C/ul\u003E\n\n\u003Cp\u003EReturn the length of the resulting string after \u003Cstrong\u003Eexactly\u003C/strong\u003E \u003Ccode\u003Et\u003C/code\u003E transformations.\u003C/p\u003E\n\n\u003Cp\u003ESince the answer may be very large, return it \u003Cstrong\u003Emodulo\u003C/strong\u003E \u003Ccode\u003E10\u003Csup\u003E9\u003C/sup\u003E \u002B 7\u003C/code\u003E.\u003C/p\u003E\n\n\u003Cp\u003E\u0026nbsp;\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong class=\u0022example\u0022\u003EExample 1:\u003C/strong\u003E\u003C/p\u003E\n\n\u003Cdiv class=\u0022example-block\u0022\u003E\n\u003Cp\u003E\u003Cstrong\u003EInput:\u003C/strong\u003E \u003Cspan class=\u0022example-io\u0022\u003Es = \u0026quot;abcyy\u0026quot;, t = 2, nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2]\u003C/span\u003E\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EOutput:\u003C/strong\u003E \u003Cspan class=\u0022example-io\u0022\u003E7\u003C/span\u003E\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EExplanation:\u003C/strong\u003E\u003C/p\u003E\n\n\u003Cul\u003E\n\t\u003Cli\u003E\n\t\u003Cp\u003E\u003Cstrong\u003EFirst Transformation (t = 1):\u003C/strong\u003E\u003C/p\u003E\n\n\t\u003Cul\u003E\n\t\t\u003Cli\u003E\u003Ccode\u003E\u0026#39;a\u0026#39;\u003C/code\u003E becomes \u003Ccode\u003E\u0026#39;b\u0026#39;\u003C/code\u003E as \u003Ccode\u003Enums[0] == 1\u003C/code\u003E\u003C/li\u003E\n\t\t\u003Cli\u003E\u003Ccode\u003E\u0026#39;b\u0026#39;\u003C/code\u003E becomes \u003Ccode\u003E\u0026#39;c\u0026#39;\u003C/code\u003E as \u003Ccode\u003Enums[1] == 1\u003C/code\u003E\u003C/li\u003E\n\t\t\u003Cli\u003E\u003Ccode\u003E\u0026#39;c\u0026#39;\u003C/code\u003E becomes \u003Ccode\u003E\u0026#39;d\u0026#39;\u003C/code\u003E as \u003Ccode\u003Enums[2] == 1\u003C/code\u003E\u003C/li\u003E\n\t\t\u003Cli\u003E\u003Ccode\u003E\u0026#39;y\u0026#39;\u003C/code\u003E becomes \u003Ccode\u003E\u0026#39;z\u0026#39;\u003C/code\u003E as \u003Ccode\u003Enums[24] == 1\u003C/code\u003E\u003C/li\u003E\n\t\t\u003Cli\u003E\u003Ccode\u003E\u0026#39;y\u0026#39;\u003C/code\u003E becomes \u003Ccode\u003E\u0026#39;z\u0026#39;\u003C/code\u003E as \u003Ccode\u003Enums[24] == 1\u003C/code\u003E\u003C/li\u003E\n\t\t\u003Cli\u003EString after the first transformation: \u003Ccode\u003E\u0026quot;bcdzz\u0026quot;\u003C/code\u003E\u003C/li\u003E\n\t\u003C/ul\u003E\n\t\u003C/li\u003E\n\t\u003Cli\u003E\n\t\u003Cp\u003E\u003Cstrong\u003ESecond Transformation (t = 2):\u003C/strong\u003E\u003C/p\u003E\n\n\t\u003Cul\u003E\n\t\t\u003Cli\u003E\u003Ccode\u003E\u0026#39;b\u0026#39;\u003C/code\u003E becomes \u003Ccode\u003E\u0026#39;c\u0026#39;\u003C/code\u003E as \u003Ccode\u003Enums[1] == 1\u003C/code\u003E\u003C/li\u003E\n\t\t\u003Cli\u003E\u003Ccode\u003E\u0026#39;c\u0026#39;\u003C/code\u003E becomes \u003Ccode\u003E\u0026#39;d\u0026#39;\u003C/code\u003E as \u003Ccode\u003Enums[2] == 1\u003C/code\u003E\u003C/li\u003E\n\t\t\u003Cli\u003E\u003Ccode\u003E\u0026#39;d\u0026#39;\u003C/code\u003E becomes \u003Ccode\u003E\u0026#39;e\u0026#39;\u003C/code\u003E as \u003Ccode\u003Enums[3] == 1\u003C/code\u003E\u003C/li\u003E\n\t\t\u003Cli\u003E\u003Ccode\u003E\u0026#39;z\u0026#39;\u003C/code\u003E becomes \u003Ccode\u003E\u0026#39;ab\u0026#39;\u003C/code\u003E as \u003Ccode\u003Enums[25] == 2\u003C/code\u003E\u003C/li\u003E\n\t\t\u003Cli\u003E\u003Ccode\u003E\u0026#39;z\u0026#39;\u003C/code\u003E becomes \u003Ccode\u003E\u0026#39;ab\u0026#39;\u003C/code\u003E as \u003Ccode\u003Enums[25] == 2\u003C/code\u003E\u003C/li\u003E\n\t\t\u003Cli\u003EString after the second transformation: \u003Ccode\u003E\u0026quot;cdeabab\u0026quot;\u003C/code\u003E\u003C/li\u003E\n\t\u003C/ul\u003E\n\t\u003C/li\u003E\n\t\u003Cli\u003E\n\t\u003Cp\u003E\u003Cstrong\u003EFinal Length of the string:\u003C/strong\u003E The string is \u003Ccode\u003E\u0026quot;cdeabab\u0026quot;\u003C/code\u003E, which has 7 characters.\u003C/p\u003E\n\t\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/div\u003E\n\n\u003Cp\u003E\u003Cstrong class=\u0022example\u0022\u003EExample 2:\u003C/strong\u003E\u003C/p\u003E\n\n\u003Cdiv class=\u0022example-block\u0022\u003E\n\u003Cp\u003E\u003Cstrong\u003EInput:\u003C/strong\u003E \u003Cspan class=\u0022example-io\u0022\u003Es = \u0026quot;azbk\u0026quot;, t = 1, nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]\u003C/span\u003E\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EOutput:\u003C/strong\u003E \u003Cspan class=\u0022example-io\u0022\u003E8\u003C/span\u003E\u003C/p\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EExplanation:\u003C/strong\u003E\u003C/p\u003E\n\n\u003Cul\u003E\n\t\u003Cli\u003E\n\t\u003Cp\u003E\u003Cstrong\u003EFirst Transformation (t = 1):\u003C/strong\u003E\u003C/p\u003E\n\n\t\u003Cul\u003E\n\t\t\u003Cli\u003E\u003Ccode\u003E\u0026#39;a\u0026#39;\u003C/code\u003E becomes \u003Ccode\u003E\u0026#39;bc\u0026#39;\u003C/code\u003E as \u003Ccode\u003Enums[0] == 2\u003C/code\u003E\u003C/li\u003E\n\t\t\u003Cli\u003E\u003Ccode\u003E\u0026#39;z\u0026#39;\u003C/code\u003E becomes \u003Ccode\u003E\u0026#39;ab\u0026#39;\u003C/code\u003E as \u003Ccode\u003Enums[25] == 2\u003C/code\u003E\u003C/li\u003E\n\t\t\u003Cli\u003E\u003Ccode\u003E\u0026#39;b\u0026#39;\u003C/code\u003E becomes \u003Ccode\u003E\u0026#39;cd\u0026#39;\u003C/code\u003E as \u003Ccode\u003Enums[1] == 2\u003C/code\u003E\u003C/li\u003E\n\t\t\u003Cli\u003E\u003Ccode\u003E\u0026#39;k\u0026#39;\u003C/code\u003E becomes \u003Ccode\u003E\u0026#39;lm\u0026#39;\u003C/code\u003E as \u003Ccode\u003Enums[10] == 2\u003C/code\u003E\u003C/li\u003E\n\t\t\u003Cli\u003EString after the first transformation: \u003Ccode\u003E\u0026quot;bcabcdlm\u0026quot;\u003C/code\u003E\u003C/li\u003E\n\t\u003C/ul\u003E\n\t\u003C/li\u003E\n\t\u003Cli\u003E\n\t\u003Cp\u003E\u003Cstrong\u003EFinal Length of the string:\u003C/strong\u003E The string is \u003Ccode\u003E\u0026quot;bcabcdlm\u0026quot;\u003C/code\u003E, which has 8 characters.\u003C/p\u003E\n\t\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/div\u003E\n\n\u003Cp\u003E\u0026nbsp;\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003EConstraints:\u003C/strong\u003E\u003C/p\u003E\n\n\u003Cul\u003E\n\t\u003Cli\u003E\u003Ccode\u003E1 \u0026lt;= s.length \u0026lt;= 10\u003Csup\u003E5\u003C/sup\u003E\u003C/code\u003E\u003C/li\u003E\n\t\u003Cli\u003E\u003Ccode\u003Es\u003C/code\u003E consists only of lowercase English letters.\u003C/li\u003E\n\t\u003Cli\u003E\u003Ccode\u003E1 \u0026lt;= t \u0026lt;= 10\u003Csup\u003E9\u003C/sup\u003E\u003C/code\u003E\u003C/li\u003E\n\t\u003Cli\u003E\u003Ccode\u003E\u003Cfont face=\u0022monospace\u0022\u003Enums.length == 26\u003C/font\u003E\u003C/code\u003E\u003C/li\u003E\n\t\u003Cli\u003E\u003Ccode\u003E\u003Cfont face=\u0022monospace\u0022\u003E1 \u0026lt;= nums[i] \u0026lt;= 25\u003C/font\u003E\u003C/code\u003E\u003C/li\u003E\n\u003C/ul\u003E\n",
  "example": "\u0022abcyy\u0022\n2\n[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2]\n\u0022azbk\u0022\n1\n[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
  "constraints": "",
  "solution": "",
  "explanation": "",
  "exampleTestcases": "\u0022abcyy\u0022\n2\n[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2]\n\u0022azbk\u0022\n1\n[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
  "categoryTitle": "Algorithms",
  "topicTags": [
    {
      "name": "Hash Table",
      "id": "",
      "slug": "hash-table"
    },
    {
      "name": "Math",
      "id": "",
      "slug": "math"
    },
    {
      "name": "String",
      "id": "",
      "slug": "string"
    },
    {
      "name": "Dynamic Programming",
      "id": "",
      "slug": "dynamic-programming"
    },
    {
      "name": "Counting",
      "id": "",
      "slug": "counting"
    }
  ],
  "acRate": 0,
  "frequency": 0,
  "status": ""
}